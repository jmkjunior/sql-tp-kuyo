
-- Déclencheur 1: Intercepter les tentatives d'insertion dans la vue ALL_WORKERS_ELAPSED
CREATE OR REPLACE TRIGGER INSERT_ALL_WORKERS_ELAPSED
INSTEAD OF INSERT ON ALL_WORKERS_ELAPSED
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        IF :NEW.AGE IS NOT NULL THEN
            INSERT INTO WORKERS_FACTORY_2 (FIRST_NAME, LAST_NAME, START_DATE, END_DATE)
            VALUES (:NEW.FIRST_NAME, :NEW.LAST_NAME, :NEW.START_DATE, NULL);
        ELSE
            RAISE_APPLICATION_ERROR(-20001, 'Cannot insert worker into ALL_WORKERS_ELAPSED view.');
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20002, 'Only insertion is allowed on ALL_WORKERS_ELAPSED view.');
    END IF;
END;
/

-- Déclencheur 2: Enregistrer la date d'ajout du robot dans la table AUDIT_ROBOT
CREATE OR REPLACE TRIGGER AUDIT_ROBOT_INSERT
AFTER INSERT ON ROBOTS
FOR EACH ROW
BEGIN
    INSERT INTO AUDIT_ROBOT (ROBOT_ID, CREATED_AT)
    VALUES (:NEW.ID, SYSDATE);
END;
/

-- Déclencheur 3: Vérifier le nombre d'usines par rapport au format des tables WORKERS_FACTORY_<N>
CREATE OR REPLACE TRIGGER CHECK_FACTORY_COUNT
BEFORE INSERT OR UPDATE OR DELETE ON FACTORIES
FOR EACH ROW
DECLARE
    NUM_FACTORIES NUMBER;
    NUM_WORKER_TABLES NUMBER;
BEGIN
    SELECT COUNT(*) INTO NUM_FACTORIES FROM FACTORIES;
    SELECT COUNT(*) INTO NUM_WORKER_TABLES FROM USER_TABLES WHERE TABLE_NAME LIKE 'WORKERS_FACTORY\_%' ESCAPE '\';

    IF NUM_FACTORIES != NUM_WORKER_TABLES THEN
        RAISE_APPLICATION_ERROR(-20003, 'Number of factories does not match the number of worker tables.');
    END IF;
END;
/
